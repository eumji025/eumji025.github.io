<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.eumji025.com/"/>
  <updated>2018-05-01T04:47:49.204Z</updated>
  <id>http://www.eumji025.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql-8-install</title>
    <link href="http://www.eumji025.com/2018/05/01/mysql-8-install/"/>
    <id>http://www.eumji025.com/2018/05/01/mysql-8-install/</id>
    <published>2018-05-01T04:28:14.000Z</published>
    <updated>2018-05-01T04:47:49.204Z</updated>
    
    <summary type="html">
    
      本文主要讲述MySQL8.11版本解压版的操作过程。因为和之前自己使用的5.6版本有一些差距，而且百度了多次也没有什么比较好的答案，所以记录一下以备不时之需。
    
    </summary>
    
      <category term="数据库" scheme="http://www.eumji025.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://www.eumji025.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java8 - 时间API记录</title>
    <link href="http://www.eumji025.com/2018/03/19/localdatetime-api/"/>
    <id>http://www.eumji025.com/2018/03/19/localdatetime-api/</id>
    <published>2018-03-19T11:15:51.000Z</published>
    <updated>2018-03-21T14:38:26.800Z</updated>
    
    <summary type="html">
    
      本文主要介绍Java8中新时间API的案例，来快速掌握Java8中时间API，个人感觉其中的改进使我们能更加轻松的使用这些API来满足我们平时的使用需求，特别是在时间的处理修改上更加的细致和丰富，通过本文算是对个人使用过程中的一些记录和总结
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="LocalDateTime" scheme="http://www.eumji025.com/tags/LocalDateTime/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal扩展 - InheritableThreadLocal的原理</title>
    <link href="http://www.eumji025.com/2018/03/18/inheritableThreadLocal/"/>
    <id>http://www.eumji025.com/2018/03/18/inheritableThreadLocal/</id>
    <published>2018-03-18T02:15:35.000Z</published>
    <updated>2018-03-18T02:18:58.934Z</updated>
    
    <summary type="html">
    
      本文是在ThreadLocal的基础上，分析其子类InheritableThreadLocal。从名称应该也可以看出，其作用是为了继承ThreadLocal里的东西。简单来说就是为了在子线程中继承父线程中设置的值。举个很简单的例子，如果我想传递父线程的某个对象，我不用为每个子线程都设置构造函数，而子线程的任何地方都可以获取。不过需要注意的是，一旦子线程初始化，父线程再更换对象，子线程将不受影响
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="ThreadLocal" scheme="http://www.eumji025.com/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis分析 - SQL参数绑定【初稿】</title>
    <link href="http://www.eumji025.com/2018/03/08/mybatis-paramter-binder/"/>
    <id>http://www.eumji025.com/2018/03/08/mybatis-paramter-binder/</id>
    <published>2018-03-08T14:49:12.000Z</published>
    <updated>2018-03-13T12:25:39.064Z</updated>
    
    <summary type="html">
    
      相信我们在使用过mybatis多参数查询时，又不使用@param注释的时候，将无法和我们xml中参数绑定的情况，因为mybatis在我们没有使用param注解时候，默认使用的param1，param2等名称表示我们的请求参数。今天主要追要追踪一下mybatis到底是怎么进行处理的
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis参数" scheme="http://www.eumji025.com/tags/Mybatis%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis分析 - 插件的加载和使用</title>
    <link href="http://www.eumji025.com/2018/03/02/mybatis-interceptor-analysis/"/>
    <id>http://www.eumji025.com/2018/03/02/mybatis-interceptor-analysis/</id>
    <published>2018-03-02T12:17:43.000Z</published>
    <updated>2018-03-02T12:24:15.444Z</updated>
    
    <summary type="html">
    
      前面也陆陆续续的介绍了一些mybatis相关的内容，今天介绍一点mybatis里非常有用的拓展功能`插件`，我们都知道mybatis的pagehelper分页插件，可是有没有想过是怎么实现的呢，大概的我想应该就是在查询之前拦截mybatis的sql加上分页的语句。今天抱着学习的态度一起来探究一下mybatis插件原理
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis 插件" scheme="http://www.eumji025.com/tags/Mybatis-%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>聊聊cglib动态代理的实现</title>
    <link href="http://www.eumji025.com/2018/02/23/cglib-proxy-analysis/"/>
    <id>http://www.eumji025.com/2018/02/23/cglib-proxy-analysis/</id>
    <published>2018-02-23T02:18:22.000Z</published>
    <updated>2018-03-17T02:47:22.771Z</updated>
    
    <summary type="html">
    
      cglib是另外一种动态代理的方法，他和jdk动态代理的实现是有区别的，我们在之前见过jdk动态代理类是必须实现了接口的，而cglib不需要实现接口，但是必须保证类不含有final关键字，否则是无法代理的
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="proxy" scheme="http://www.eumji025.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis分析 - Mapper加载使用分析</title>
    <link href="http://www.eumji025.com/2018/02/21/mybatis-mapper-info/"/>
    <id>http://www.eumji025.com/2018/02/21/mybatis-mapper-info/</id>
    <published>2018-02-21T07:01:30.000Z</published>
    <updated>2018-03-05T23:43:43.684Z</updated>
    
    <summary type="html">
    
      本文主要讲述mybatis的mapper加载和使用流程。在之前的配置文件加载分析中我们已经讲解了在mybatis构建sqlSessionFactory的时候就会加载mybatis的配置文件，其中当然包含了mybatis的alias，typeHandler，settings，mapper。但是我们并没有对其深入的去讲解，本文则主要通过细节去了解到底是如何进行mapper实例化
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis Mapper加载" scheme="http://www.eumji025.com/tags/Mybatis-Mapper%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis分析 - 二级缓存</title>
    <link href="http://www.eumji025.com/2018/02/16/mybatis-second-cache/"/>
    <id>http://www.eumji025.com/2018/02/16/mybatis-second-cache/</id>
    <published>2018-02-16T03:29:18.000Z</published>
    <updated>2018-03-02T12:35:03.424Z</updated>
    
    <summary type="html">
    
      本文同一个实例展示mybatis集成redis做二级缓存，并从源码的解读解析了整个流程，了解其工作原理
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis缓存" scheme="http://www.eumji025.com/tags/Mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>独占锁ReentrantLock分析</title>
    <link href="http://www.eumji025.com/2018/02/11/reentrantLock-analysis/"/>
    <id>http://www.eumji025.com/2018/02/11/reentrantLock-analysis/</id>
    <published>2018-02-11T11:58:18.000Z</published>
    <updated>2018-02-16T03:43:15.461Z</updated>
    
    <summary type="html">
    
      为什么会诞生lock,我想我们也是很容理解的,因为JDK6之前的synchronized关键字不够高效,而且synchronized不够灵活(比如无法使用尝试在规定时间内获取锁)等,所以就诞生了lock. lock改善了很多同步上的性能问题,而且有非常灵活的API
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis分析 - 一级缓存</title>
    <link href="http://www.eumji025.com/2018/02/10/mybatis-first-cache/"/>
    <id>http://www.eumji025.com/2018/02/10/mybatis-first-cache/</id>
    <published>2018-02-10T15:30:30.000Z</published>
    <updated>2018-03-11T02:26:57.622Z</updated>
    
    <summary type="html">
    
      本文主要通过实例的方式解决自己心中对于mybatis一级缓存得疑惑，也通过源码追踪的方式最终验证这些问题产生的原因，非常的值得我们去领会
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis缓存" scheme="http://www.eumji025.com/tags/Mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>FutureTask源码实现</title>
    <link href="http://www.eumji025.com/2018/02/06/futureTask-analysis/"/>
    <id>http://www.eumji025.com/2018/02/06/futureTask-analysis/</id>
    <published>2018-02-06T05:23:46.000Z</published>
    <updated>2018-02-16T03:43:19.573Z</updated>
    
    <summary type="html">
    
      FutureTask是一种支持取消的异步任务包装类，也就是说FutureTask执行的时候不立即返回结果，自己可以通过异步调用get方法获取结果，也可以中途调用cancel方法取消任务。而且必须要知道的就是FutureTask只是任务的包装类，并不是真正的任务类
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>不得不懂的线程池 - ThreadPoolExecutor</title>
    <link href="http://www.eumji025.com/2018/02/01/threadPool-analysis/"/>
    <id>http://www.eumji025.com/2018/02/01/threadPool-analysis/</id>
    <published>2018-02-01T00:41:37.000Z</published>
    <updated>2018-03-02T12:36:20.776Z</updated>
    
    <summary type="html">
    
      线程池的诞生于JDK1.5，主要的目的是解决我们在使用线程的时候通常都是重复的创建和销毁，为了让线程能够得到复用，避免我们重复的创建和销毁，提高我们的效率，降低内存的开销。
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis专栏 - 总体流程回顾</title>
    <link href="http://www.eumji025.com/2018/01/21/mybatis-epitome/"/>
    <id>http://www.eumji025.com/2018/01/21/mybatis-epitome/</id>
    <published>2018-01-21T01:35:17.000Z</published>
    <updated>2018-03-11T02:31:05.769Z</updated>
    
    <summary type="html">
    
      本文主要回顾mybatis的整体执行流程，走马观花去看一下mybatis是如何进行加载和使用的，为后续的文章分析做铺垫
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis概括" scheme="http://www.eumji025.com/tags/Mybatis%E6%A6%82%E6%8B%AC/"/>
    
  </entry>
  
  <entry>
    <title>AbstractQueuedSynchronizer源码分析</title>
    <link href="http://www.eumji025.com/2018/01/18/AbstractQueuedSynchronizer-analysis/"/>
    <id>http://www.eumji025.com/2018/01/18/AbstractQueuedSynchronizer-analysis/</id>
    <published>2018-01-18T13:56:36.000Z</published>
    <updated>2018-02-16T03:43:22.161Z</updated>
    
    <summary type="html">
    
      AbstractQueuedSynchronizer是一个基于first-in-first-out (FIFO)队列实现阻塞锁和同步器功能的框架。此类的设计目标是成为依靠单个原子 int 值来表示状态。子类必须定义更改此状态的受保护方法（如tryReleaseShared），并定义哪种状态对于此对象意味着被获取或被释放
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Go 初学者成长之路</title>
    <link href="http://www.eumji025.com/2018/01/12/go-learn-material/"/>
    <id>http://www.eumji025.com/2018/01/12/go-learn-material/</id>
    <published>2018-01-12T05:36:18.000Z</published>
    <updated>2018-02-16T03:43:18.973Z</updated>
    
    <summary type="html">
    
      本文主要介绍一些go语言学习的相关资料,希望在学习的路上减轻大家的负担,本文是一片装在文章,看到写的非常的充实,就申请转载了）
    
    </summary>
    
      <category term="Golang基础" scheme="http://www.eumji025.com/categories/Golang%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="golang" scheme="http://www.eumji025.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="http://www.eumji025.com/2018/01/06/hashmap-analysis/"/>
    <id>http://www.eumji025.com/2018/01/06/hashmap-analysis/</id>
    <published>2018-01-06T03:06:50.000Z</published>
    <updated>2018-03-13T11:11:17.002Z</updated>
    
    <summary type="html">
    
      HashMap是基于hash表的map的实现,使用key-value形式存储键值对，并允许使用 null 值和 null 键,但是key只能有一个为null. Map不保证映射的顺序，其内部是根据hash值去模运算去排列的。HashMap内部使用entry数组作为存储的介质.）
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础 - ThreadLocal分析篇</title>
    <link href="http://www.eumji025.com/2018/01/06/threadlocal-analysis/"/>
    <id>http://www.eumji025.com/2018/01/06/threadlocal-analysis/</id>
    <published>2018-01-05T23:44:42.000Z</published>
    <updated>2018-03-18T02:19:12.546Z</updated>
    
    <summary type="html">
    
      ThreadLocal是一种可以将变量线程间隔离，但是线程内又可以共享的一个工具类，非常有利于解决一些希望在线程间复用的变量而又不知道如何存放的问题。当然使用ThreadLocal是有需要的，因为滥用可能会造成内存移除等问题，具体请看本文
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="ThreadLocal" scheme="http://www.eumji025.com/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>动态代理及Proxy源码分析</title>
    <link href="http://www.eumji025.com/2018/01/02/dynamic-proxy/"/>
    <id>http://www.eumji025.com/2018/01/02/dynamic-proxy/</id>
    <published>2018-01-02T03:23:46.000Z</published>
    <updated>2018-02-25T05:08:41.312Z</updated>
    
    <summary type="html">
    
      代理是java中非常重要的一种设计模式,动态代理则可以认为是一种动态代理的最佳实践,本文将由浅及深的介绍动态代理及其proxy源码分析,文章写的不一定都对,请各位看官带着批判的态度阅读此文章
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="proxy" scheme="http://www.eumji025.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>展望2018</title>
    <link href="http://www.eumji025.com/2018/01/01/2018-target/"/>
    <id>http://www.eumji025.com/2018/01/01/2018-target/</id>
    <published>2017-12-31T16:08:47.000Z</published>
    <updated>2018-03-02T12:38:56.831Z</updated>
    
    <summary type="html">
    
      2017年已经成为过去，2018年已经来临，希望自己在新的一年能够得到更多的成长。同时对自己也有更多的要求
    
    </summary>
    
      <category term="其他" scheme="http://www.eumji025.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="target" scheme="http://www.eumji025.com/tags/target/"/>
    
  </entry>
  
  <entry>
    <title>开源系统 - 博客简介篇</title>
    <link href="http://www.eumji025.com/2017/06/25/eumjiblog-introduce/"/>
    <id>http://www.eumji025.com/2017/06/25/eumjiblog-introduce/</id>
    <published>2017-06-25T05:03:44.000Z</published>
    <updated>2018-02-25T11:37:09.066Z</updated>
    
    <summary type="html">
    
      个人的第一个自主开发的开源项目，目的就是锻炼自己，因为在之前的工作中自己没能调整好状态。越发的感慨要静下心好好做点东西。四月份正式开始写本项目，之前也留意过一些相关的东西。此博客系统大部分都是在晚上或者周末抽空开发的，中间肯定存在着许多的不足和BUG，希望大家能踊跃的反馈给我。可以在[issues](https://github.com/eumji025/EumJi-blog/issues)提出以及发送邮件到eumji025@gmail.com 目前代码已经托管在github，欢迎大家star和fork，也鼓励大家进行二次开发
    
    </summary>
    
      <category term="开源项目" scheme="http://www.eumji025.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="blog" scheme="http://www.eumji025.com/tags/blog/"/>
    
  </entry>
  
</feed>
