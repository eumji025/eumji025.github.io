<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.eumji025.com/"/>
  <updated>2018-02-23T06:13:47.529Z</updated>
  <id>http://www.eumji025.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.eumji025.com/2018/02/23/cglib-proxy-analysis/"/>
    <id>http://www.eumji025.com/2018/02/23/cglib-proxy-analysis/</id>
    <published>2018-02-23T06:13:47.529Z</published>
    <updated>2018-02-23T06:13:47.529Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>聊聊cglib的实现</title>
    <link href="http://www.eumji025.com/2018/02/23/cglib-proxy-analysis/"/>
    <id>http://www.eumji025.com/2018/02/23/cglib-proxy-analysis/</id>
    <published>2018-02-23T02:18:22.000Z</published>
    <updated>2018-02-23T03:43:43.247Z</updated>
    
    <summary type="html">
    
      cglib是另外一种动态代理的方法，他和jdk动态代理的实现是有区别的，我们在之前见过jdk动态代理类是必须实现了接口的，而cglib不需要实现接口，但是必须保证类不含有final关键字，否则是无法代理的
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="proxy" scheme="http://www.eumji025.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis的Mapper加载使用分析</title>
    <link href="http://www.eumji025.com/2018/02/21/mybatis-mapper-info/"/>
    <id>http://www.eumji025.com/2018/02/21/mybatis-mapper-info/</id>
    <published>2018-02-21T07:01:30.000Z</published>
    <updated>2018-02-21T07:06:13.015Z</updated>
    
    <summary type="html">
    
      本文主要讲述mybatis的mapper加载和使用流程。在之前的配置文件加载分析中我们已经讲解了在mybatis构建sqlSessionFactory的时候就会加载mybatis的配置文件，其中当然包含了mybatis的alias，typeHandler，settings，mapper。但是我们并没有对其深入的去讲解，本文则主要通过细节去了解到底是如何进行mapper实例化
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis Mapper加载" scheme="http://www.eumji025.com/tags/Mybatis-Mapper%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Mybatis二级缓存</title>
    <link href="http://www.eumji025.com/2018/02/16/mybatis-second-cache/"/>
    <id>http://www.eumji025.com/2018/02/16/mybatis-second-cache/</id>
    <published>2018-02-16T03:29:18.000Z</published>
    <updated>2018-02-16T03:43:16.097Z</updated>
    
    <summary type="html">
    
      本文同一个实例展示mybatis集成redis做二级缓存，并从源码的解读解析了整个流程，了解其工作原理
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis缓存" scheme="http://www.eumji025.com/tags/Mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>独占锁ReentrantLock分析</title>
    <link href="http://www.eumji025.com/2018/02/11/reentrantLock-analysis/"/>
    <id>http://www.eumji025.com/2018/02/11/reentrantLock-analysis/</id>
    <published>2018-02-11T11:58:18.000Z</published>
    <updated>2018-02-16T03:43:15.461Z</updated>
    
    <summary type="html">
    
      为什么会诞生lock,我想我们也是很容理解的,因为JDK6之前的synchronized关键字不够高效,而且synchronized不够灵活(比如无法使用尝试在规定时间内获取锁)等,所以就诞生了lock. lock改善了很多同步上的性能问题,而且有非常灵活的API
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Mybatis一级缓存</title>
    <link href="http://www.eumji025.com/2018/02/10/mybatis-first-cache/"/>
    <id>http://www.eumji025.com/2018/02/10/mybatis-first-cache/</id>
    <published>2018-02-10T15:30:30.000Z</published>
    <updated>2018-02-16T03:43:16.685Z</updated>
    
    <summary type="html">
    
      本文主要通过实例的方式解决自己心中对于mybatis一级缓存得疑惑，也通过源码追踪的方式最终验证这些问题产生的原因，非常的值得我们去领会
    
    </summary>
    
      <category term="Mybatis解析专栏" scheme="http://www.eumji025.com/categories/Mybatis%E8%A7%A3%E6%9E%90%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Mybatis缓存" scheme="http://www.eumji025.com/tags/Mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>FutureTask源码实现</title>
    <link href="http://www.eumji025.com/2018/02/06/futureTask-analysis/"/>
    <id>http://www.eumji025.com/2018/02/06/futureTask-analysis/</id>
    <published>2018-02-06T05:23:46.000Z</published>
    <updated>2018-02-16T03:43:19.573Z</updated>
    
    <summary type="html">
    
      FutureTask是一种支持取消的异步任务包装类，也就是说FutureTask执行的时候不立即返回结果，自己可以通过异步调用get方法获取结果，也可以中途调用cancel方法取消任务。而且必须要知道的就是FutureTask只是任务的包装类，并不是真正的任务类
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>不得不懂的线程池 - ThreadPoolExecutor</title>
    <link href="http://www.eumji025.com/2018/02/01/threadPool-analysis/"/>
    <id>http://www.eumji025.com/2018/02/01/threadPool-analysis/</id>
    <published>2018-02-01T00:41:37.000Z</published>
    <updated>2018-02-16T03:43:26.713Z</updated>
    
    <summary type="html">
    
      线程池的诞生于JDK1.5，主要的目的是解决我们在使用线程的时候通常都是重复的创建和销毁，为了让线程能够得到复用，避免我们重复的创建和销毁，提高我们的效率，降低内存的开销。
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>AbstractQueuedSynchronizer源码分析</title>
    <link href="http://www.eumji025.com/2018/01/18/AbstractQueuedSynchronizer-analysis/"/>
    <id>http://www.eumji025.com/2018/01/18/AbstractQueuedSynchronizer-analysis/</id>
    <published>2018-01-18T13:56:36.000Z</published>
    <updated>2018-02-16T03:43:22.161Z</updated>
    
    <summary type="html">
    
      AbstractQueuedSynchronizer是一个基于first-in-first-out (FIFO)队列实现阻塞锁和同步器功能的框架。此类的设计目标是成为依靠单个原子 int 值来表示状态。子类必须定义更改此状态的受保护方法（如tryReleaseShared），并定义哪种状态对于此对象意味着被获取或被释放
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Go 初学者成长之路</title>
    <link href="http://www.eumji025.com/2018/01/12/go-learn-material/"/>
    <id>http://www.eumji025.com/2018/01/12/go-learn-material/</id>
    <published>2018-01-12T05:36:18.000Z</published>
    <updated>2018-02-16T03:43:18.973Z</updated>
    
    <summary type="html">
    
      本文主要介绍一些go语言学习的相关资料,希望在学习的路上减轻大家的负担,本文是一片装在文章,看到写的非常的充实,就申请转载了）
    
    </summary>
    
      <category term="Golang基础" scheme="http://www.eumji025.com/categories/Golang%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="golang" scheme="http://www.eumji025.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="http://www.eumji025.com/2018/01/06/hashmap-analysis/"/>
    <id>http://www.eumji025.com/2018/01/06/hashmap-analysis/</id>
    <published>2018-01-06T03:06:50.000Z</published>
    <updated>2018-02-16T03:43:18.349Z</updated>
    
    <summary type="html">
    
      HashMap是基于hash表的map的实现,使用key-value形式存储键值对，并允许使用 null 值和 null 键,但是key只能有一个为null. Map不保证映射的顺序，其内部是根据hash值去模运算去排列的。HashMap内部使用entry数组作为存储的介质.）
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>动态代理及Proxy源码分析</title>
    <link href="http://www.eumji025.com/2018/01/02/dynamic-proxy/"/>
    <id>http://www.eumji025.com/2018/01/02/dynamic-proxy/</id>
    <published>2018-01-02T03:23:46.000Z</published>
    <updated>2018-02-16T03:43:20.153Z</updated>
    
    <summary type="html">
    
      代理是java中非常重要的一种设计模式,动态代理则可以认为是一种动态代理的最佳实践,本文将由浅及深的介绍动态代理及其proxy源码分析,文章写的不一定都对,请各位看官带着批判的态度阅读此文章
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>展望2018</title>
    <link href="http://www.eumji025.com/2018/01/01/2018-target/"/>
    <id>http://www.eumji025.com/2018/01/01/2018-target/</id>
    <published>2017-12-31T16:08:47.000Z</published>
    <updated>2018-02-16T03:43:24.193Z</updated>
    
    <summary type="html">
    
      2018年自我简单规划,后续慢慢完善.
    
    </summary>
    
      <category term="其他" scheme="http://www.eumji025.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="target" scheme="http://www.eumji025.com/tags/target/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot跳转页面</title>
    <link href="http://www.eumji025.com/2017/03/26/springboot-indexPage/"/>
    <id>http://www.eumji025.com/2017/03/26/springboot-indexPage/</id>
    <published>2017-03-26T00:04:54.000Z</published>
    <updated>2018-01-02T03:29:09.176Z</updated>
    
    <summary type="html">
    
      记录spring boot跳转到静态页面。
    
    </summary>
    
      <category term="Spring专栏" scheme="http://www.eumji025.com/categories/Spring%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="spring-boot" scheme="http://www.eumji025.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot-customport</title>
    <link href="http://www.eumji025.com/2017/02/26/spring-boot-customport/"/>
    <id>http://www.eumji025.com/2017/02/26/spring-boot-customport/</id>
    <published>2017-02-26T12:19:56.000Z</published>
    <updated>2018-01-02T03:29:09.184Z</updated>
    
    <summary type="html">
    
      使用spring boot内置tomcat,并自定义端口.
    
    </summary>
    
      <category term="Spring专栏" scheme="http://www.eumji025.com/categories/Spring%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="spring-boot" scheme="http://www.eumji025.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot-helloworld</title>
    <link href="http://www.eumji025.com/2017/02/26/spring-boot-helloworld/"/>
    <id>http://www.eumji025.com/2017/02/26/spring-boot-helloworld/</id>
    <published>2017-02-26T02:32:34.000Z</published>
    <updated>2018-01-02T03:29:09.180Z</updated>
    
    <summary type="html">
    
      Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。
    
    </summary>
    
      <category term="Spring专栏" scheme="http://www.eumji025.com/categories/Spring%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="spring-boot" scheme="http://www.eumji025.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>checksty配置</title>
    <link href="http://www.eumji025.com/2017/01/18/checkstyle/"/>
    <id>http://www.eumji025.com/2017/01/18/checkstyle/</id>
    <published>2017-01-18T14:39:13.000Z</published>
    <updated>2018-02-16T03:43:20.801Z</updated>
    
    <summary type="html">
    
      CheckStyle是SourceForge下的一个项目，提供了一个帮助JAVA开发人员遵守某些编码规范的工具。它能够自动化代码规范检查过程，从而使得开发人员从这项重要，但是枯燥的任务中解脱出来。
    
    </summary>
    
      <category term="工具专栏" scheme="http://www.eumji025.com/categories/%E5%B7%A5%E5%85%B7%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="tools" scheme="http://www.eumji025.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>web开发常用注解</title>
    <link href="http://www.eumji025.com/2017/01/11/annotation/"/>
    <id>http://www.eumji025.com/2017/01/11/annotation/</id>
    <published>2017-01-11T15:14:31.000Z</published>
    <updated>2018-02-16T03:43:21.573Z</updated>
    
    <summary type="html">
    
      注解是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。
    
    </summary>
    
      <category term="Java基础" scheme="http://www.eumji025.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.eumji025.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Idea-Maven项目的创建和部署</title>
    <link href="http://www.eumji025.com/2016/11/21/Idea-Maven%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.eumji025.com/2016/11/21/Idea-Maven项目的创建和部署/</id>
    <published>2016-11-21T12:12:40.000Z</published>
    <updated>2018-02-16T03:43:17.745Z</updated>
    
    <summary type="html">
    
      使用intellij idea创建maven项目
    
    </summary>
    
      <category term="工具专栏" scheme="http://www.eumji025.com/categories/%E5%B7%A5%E5%85%B7%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="Intellij Idea" scheme="http://www.eumji025.com/tags/Intellij-Idea/"/>
    
  </entry>
  
  <entry>
    <title>推荐的markdown编辑器</title>
    <link href="http://www.eumji025.com/2016/11/05/%E6%8E%A8%E8%8D%90%E7%9A%84markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://www.eumji025.com/2016/11/05/推荐的markdown编辑器/</id>
    <published>2016-11-05T01:26:54.000Z</published>
    <updated>2018-02-16T03:43:22.801Z</updated>
    
    <summary type="html">
    
      优雅的markdown编辑器
    
    </summary>
    
      <category term="工具专栏" scheme="http://www.eumji025.com/categories/%E5%B7%A5%E5%85%B7%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="写作" scheme="http://www.eumji025.com/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
</feed>
